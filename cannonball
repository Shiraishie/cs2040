import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;

public class humancannonball {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        ArrayList<Coordinates> all = new ArrayList<>();

        String[] startcoord = br.readLine().split(" ");
        Coordinates a = new Coordinates(Double.parseDouble(startcoord[0]), Double.parseDouble(startcoord[1]));
        //
        String[] endcoord = br.readLine().split(" ");
        Coordinates b = new Coordinates(Double.parseDouble(endcoord[0]), Double.parseDouble(endcoord[1]));
        //
        int n = Integer.parseInt(br.readLine()); // num of cannons
        all.add(a); //you could use array as well
        all.add(b);

        for (int i = 0; i < n; i++) {
            String[] cannonCoord = br.readLine().split(" ");
            Coordinates cannon = new Coordinates(Double.parseDouble(cannonCoord[0]),
                    Double.parseDouble(cannonCoord[1]));
            all.add(cannon);
        }
        double[][] adjMatrix = new double[n + 2][n + 2];
        //run from A to B and cannons, you gotta run from A to any vertex
        for (int i = 1; i < n+2; i++){
            Coordinates destination = all.get(i);
            double dist = getDistance(a, destination);
            adjMatrix[0][i] = dist / 5;
        }
        //from all cannons to B and vice versa
        for (int i = 1; i< n+2; i++){
            for (int j = 1; j< n+2; j++){
                if (i!=j){
                    Coordinates first = all.get(i);
                    Coordinates second = all.get(j);
                    double dist = getDistance(first, second);
                    adjMatrix[i][j] = Math.min((Math.abs(dist-50) / 5) + 2 ,  dist / 5);
                }
            }
        }
        //floyd
        for (int i = 0; i < n+2; i++){ //this is my intermediate node
            for (int j = 0; j < n+2; j++){
                for (int k =0; k < n+2; k++){
                    adjMatrix[j][k] = Math.min(adjMatrix[j][i] + adjMatrix[i][k], adjMatrix[j][k]);
                }
            }
        }
        
        pw.println(adjMatrix[0][1]);
        pw.close();
    }

    static double getDistance(Coordinates a, Coordinates b) {
        return Math.hypot(a.x-b.x,a.y - b.y);
    }

}

class Coordinates {
    double x;
    double y;

    Coordinates(double x, double y) {
        this.x = x;
        this.y = y;
    }
}
