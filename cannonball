import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;

public class humancannonball2 {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        ArrayList<Coordinates> all = new ArrayList<>();

        String[] startcoord = br.readLine().split(" ");
        Coordinates a = new Coordinates(Double.parseDouble(startcoord[0]), Double.parseDouble(startcoord[1]));
        //
        String[] endcoord = br.readLine().split(" ");
        Coordinates b = new Coordinates(Double.parseDouble(endcoord[0]), Double.parseDouble(endcoord[1]));
        //
        int n = Integer.parseInt(br.readLine()); // num of cannons
        all.add(a);
        all.add(b);

        for (int i = 0; i < n; i++) {
            String[] cannonCoord = br.readLine().split(" ");
            Coordinates cannon = new Coordinates(Double.parseDouble(cannonCoord[0]),
                    Double.parseDouble(cannonCoord[1]));
            all.add(cannon);
        }
        // making adjmatrix
        double[][] adjMatrix = new double[n + 2][n + 2];
        // Direct Running for A to B
        double abDistance = getDistance(a, b);
        adjMatrix[0][1] = abDistance / 5;
        adjMatrix[1][0] = abDistance / 5;
        //
        for (int i = 2; i < n+2; i++){ //from A to ALL cannons
            Coordinates cannon = all.get(i);
            double dist = getDistance(a, cannon);
            if ()
        }


        for (int i = 0; i < n + 2; i++) {
            for (int j = 0; j < n + 2; j++) {
                if (i != j) {
                    Coordinates first = all.get(i);
                    Coordinates second = all.get(j);
                    adjMatrix[i][j] = getDistance(first, second);
                }
            }
        }
        pw.println(adjMatrix);
        pw.close();
    }

    static double getDistance(Coordinates a, Coordinates b) {
        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
    }

}

class Coordinates {
    double x;
    double y;

    Coordinates(double x, double y) {
        this.x = x;
        this.y = y;
    }
}
